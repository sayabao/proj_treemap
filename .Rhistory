req(export_data())
write(toJSON(export_data(), auto_unbox = TRUE, pretty = TRUE), file)
}
)
# 加载树数据
observeEvent(input$loadFile, {
req(input$loadFile)
tryCatch({
# 读取并验证JSON文件
treeData <- fromJSON(input$loadFile$datapath)
# 检查数据结构
if (!is.data.frame(treeData) && !is.list(treeData)) {
stop("无效的数据格式")
}
# 确保有必要的字段
if (!all(c("species", "lat", "lng") %in% names(treeData))) {
stop("缺少必要的字段: species, lat 或 lng")
}
# 转换为列表格式
if (is.data.frame(treeData)) {
treeData <- split(treeData, seq(nrow(treeData)))
}
# 发送数据到前端
session$sendCustomMessage(type = "loadTreeData", treeData)
showNotification("数据加载成功", type = "message")
}, error = function(e) {
showNotification(paste("加载文件失败:", e$message), type = "error")
})
})
# 处理JavaScript消息
observe({
# 更新标记
session$sendCustomMessage(type = "jsCode", list(
code = "
Shiny.addCustomMessageHandler('updateMarker', function(data) {
var marker = markers[data.id];
if (marker) {
marker.treeData.species = data.species;
marker.setPopupContent(getTreeInfoContent(marker));
marker.closePopup();
marker.openPopup();
}
});
Shiny.addCustomMessageHandler('editMarker', function(data) {
var marker = markers[data.id];
if (marker) {
var popupContent = `
<div class=\"tree-form\">
<label>树种: <input type=\"text\" id=\"species-${marker.id}\" value=\"${marker.treeData.species}\"></label><br>
<button onclick=\"Shiny.setInputValue('save_tree', {id: '${marker.id}', species: document.getElementById('species-${marker.id}').value}, {priority: 'event'})\">保存</button>
<button onclick=\"Shiny.setInputValue('delete_tree', '${marker.id}', {priority: 'event'})\">删除</button>
</div>
`;
marker.setPopupContent(popupContent);
marker.openPopup();
}
});
Shiny.addCustomMessageHandler('deleteMarker', function(data) {
var marker = markers[data.id];
if (marker) {
map.removeLayer(marker);
delete markers[data.id];
}
});
"
))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(jsonlite)
ui <- fluidPage(
tags$head(
tags$style(HTML("
#map { height: 600px; width: 100%; }
.tree-form { padding: 10px; }
.tree-form input { margin: 5px 0; width: 100%; }
.tree-info { padding: 10px; }
.control-panel {
position: absolute;
top: 10px;
left: 10px;
background: white;
padding: 10px;
z-index: 1000;
border: 1px solid #ccc;
border-radius: 4px;
}
.control-panel button, .control-panel input { margin-top: 5px; }
"))
),
leafletOutput("map"),
absolutePanel(
class = "control-panel",
top = 10, left = 10,
div("点击地图添加树并编辑资料"),
actionButton("export", "导出树数据"),
fileInput("loadFile", "加载树数据", accept = ".json")
),
tags$script(HTML("
var markers = {};
var markerIdCounter = 0;
var greenDotIcon = L.divIcon({
className: 'custom-dot',
html: '<div style=\"background-color: green; width: 8px; height: 8px; border-radius: 50%;\"></div>',
iconSize: [8, 8],
iconAnchor: [4, 4]
});
function getTreeInfoContent(marker) {
return `
<div class=\"tree-info\">
<b>树信息</b><br>
树种: ${marker.treeData.species || '未指定'}<br>
坐标: ${marker.treeData.lat}, ${marker.treeData.lng}<br>
<button onclick=\"Shiny.setInputValue('edit_tree', '${marker.id}', {priority: 'event'})\">编辑</button>
<button onclick=\"Shiny.setInputValue('delete_tree', '${marker.id}', {priority: 'event'})\">删除</button>
</div>
`;
}
Shiny.addCustomMessageHandler('loadTreeData', function(treeDataArray) {
console.log('Received data (type):', Array.isArray(treeDataArray) ? 'Array' : typeof treeDataArray);
if (!Array.isArray(treeDataArray)) {
console.error('数据格式错误: 期望数组，实际收到:', treeDataArray);
return;
}
treeDataArray.forEach(function(treeData) {
try {
var lat = parseFloat(treeData.lat);
var lng = parseFloat(treeData.lng);
if (isNaN(lat) || isNaN(lng)) {
console.error('无效坐标:', treeData);
return;
}
var marker = L.marker([lat, lng], { icon: greenDotIcon }).addTo(map);
marker.id = 'marker-' + markerIdCounter++;
marker.treeData = {
species: treeData.species || '',
lat: lat.toFixed(6),
lng: lng.toFixed(6)
};
markers[marker.id] = marker;
marker.bindPopup(getTreeInfoContent(marker));
console.log('添加标记:', marker.id, 'at', lat, lng);
} catch (error) {
console.error('处理标记时出错:', error);
}
});
});
"))
)
server <- function(input, output, session) {
# 初始化地图
output$map <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
attribution = '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
) %>%
setView(lng = 113.2943, lat = 23.0965, zoom = 19)
})
# 自动加载树数据（关键修正：强制转换为列表）
observe({
if (file.exists("treedata.json")) {
tryCatch({
# 读取为列表，禁用自动简化
treeData <- fromJSON("treedata.json", simplifyVector = FALSE)
cat("数据加载成功，类型:", class(treeData), "\n")
session$sendCustomMessage(type = "loadTreeData", treeData)
}, error = function(e) {
cat("加载文件失败:", e$message, "\n")
})
} else {
cat("文件 treedata.json 未找到\n")
}
})
# 文件上传处理
observeEvent(input$loadFile, {
req(input$loadFile)
tryCatch({
treeData <- fromJSON(input$loadFile$datapath, simplifyVector = FALSE)
session$sendCustomMessage(type = "loadTreeData", treeData)
showNotification("数据加载成功", type = "message")
}, error = function(e) {
showNotification(paste("加载失败:", e$message), type = "error")
})
})
# 其他原有功能（保存/编辑/删除/导出）
observeEvent(input$save_tree, {
session$sendCustomMessage(type = "updateMarker", list(
id = input$save_tree$id,
species = input$save_tree$species
))
})
observeEvent(input$edit_tree, {
session$sendCustomMessage(type = "editMarker", list(
id = input$edit_tree
))
})
observeEvent(input$delete_tree, {
session$sendCustomMessage(type = "deleteMarker", list(
id = input$delete_tree
))
})
output$export <- downloadHandler(
filename = "tree_data.json",
content = function(file) {
shinyjs::runjs("
var treeDataArray = Object.values(markers).map(marker => marker.treeData);
Shiny.setInputValue('exported_data', treeDataArray, {priority: 'event'});
")
req(input$exported_data)
write(toJSON(input$exported_data, auto_unbox = TRUE, pretty = TRUE), file)
}
)
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(jsonlite)
ui <- fluidPage(
tags$head(
tags$style(HTML("
#map { height: 600px; width: 100%; }
.tree-form { padding: 10px; }
.tree-form input { margin: 5px 0; width: 100%; }
.tree-info { padding: 10px; }
.control-panel {
position: absolute;
top: 10px;
left: 10px;
background: white;
padding: 10px;
z-index: 1000;
border: 1px solid #ccc;
border-radius: 4px;
}
.control-panel button, .control-panel input { margin-top: 5px; }
"))
),
leafletOutput("map"),
absolutePanel(
class = "control-panel",
top = 10, left = 10,
div("点击地图添加树并编辑资料"),
actionButton("export", "导出树数据"),
fileInput("loadFile", "加载树数据", accept = ".json")
),
tags$script(HTML("
var markers = {};
var markerIdCounter = 0;
var map; // 全局存储地图对象
var greenDotIcon = L.divIcon({
className: 'custom-dot',
html: '<div style=\"background-color: green; width: 8px; height: 8px; border-radius: 50%;\"></div>',
iconSize: [8, 8],
iconAnchor: [4, 4]
});
function getTreeInfoContent(marker) {
return `
<div class=\"tree-info\">
<b>树信息</b><br>
树种: ${marker.treeData.species || '未指定'}<br>
坐标: ${marker.treeData.lat}, ${marker.treeData.lng}<br>
<button onclick=\"Shiny.setInputValue('edit_tree', '${marker.id}', {priority: 'event'})\">编辑</button>
<button onclick=\"Shiny.setInputValue('delete_tree', '${marker.id}', {priority: 'event'})\">删除</button>
</div>
`;
}
// 确保地图对象可用后再处理数据
function safeAddMarkers(treeDataArray) {
if (!map) {
console.error('地图未初始化，等待重试...');
setTimeout(function() { safeAddMarkers(treeDataArray) }, 100);
return;
}
treeDataArray.forEach(function(treeData) {
try {
var lat = parseFloat(treeData.lat);
var lng = parseFloat(treeData.lng);
if (isNaN(lat) || isNaN(lng)) {
console.error('无效坐标:', treeData);
return;
}
var marker = L.marker([lat, lng], { icon: greenDotIcon }).addTo(map);
marker.id = 'marker-' + markerIdCounter++;
marker.treeData = {
species: treeData.species || '',
lat: lat.toFixed(6),
lng: lng.toFixed(6)
};
markers[marker.id] = marker;
marker.bindPopup(getTreeInfoContent(marker));
console.log('添加标记:', marker.id);
} catch (error) {
console.error('添加标记失败:', error);
}
});
}
Shiny.addCustomMessageHandler('loadTreeData', function(treeDataArray) {
console.log('收到数据，类型:', Array.isArray(treeDataArray) ? '数组' : typeof treeDataArray);
safeAddMarkers(treeDataArray);
});
"))
)
server <- function(input, output, session) {
# 初始化地图并暴露 map 对象到全局
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 113.2943, lat = 23.0965, zoom = 19) %>%
htmlwidgets::onRender("
function(el, x) {
// 将地图对象赋值给全局变量
window.map = this;
console.log('地图初始化完成');
}
")
})
# 自动加载树数据
observe({
if (file.exists("treedata.json")) {
tryCatch({
treeData <- fromJSON("treedata.json", simplifyVector = FALSE)
cat("数据加载成功，条目数:", length(treeData), "\n")
session$sendCustomMessage(type = "loadTreeData", treeData)
}, error = function(e) {
cat("加载失败:", e$message, "\n")
})
}
})
# 文件上传处理
observeEvent(input$loadFile, {
req(input$loadFile)
tryCatch({
treeData <- fromJSON(input$loadFile$datapath, simplifyVector = FALSE)
session$sendCustomMessage(type = "loadTreeData", treeData)
}, error = function(e) {
showNotification(paste("加载失败:", e$message), type = "error")
})
})
# 其他功能保持不变
observeEvent(input$save_tree, {
session$sendCustomMessage(type = "updateMarker", list(
id = input$save_tree$id,
species = input$save_tree$species
))
})
output$export <- downloadHandler(
filename = "tree_data.json",
content = function(file) {
shinyjs::runjs("
var treeDataArray = Object.values(markers).map(marker => marker.treeData);
Shiny.setInputValue('exported_data', treeDataArray, {priority: 'event'});
")
req(input$exported_data)
write(toJSON(input$exported_data, auto_unbox = TRUE, pretty = TRUE), file)
}
)
}
shinyApp(ui, server)
update.packages(c("rsconnect", "shiny"))
library(shiny)
library(leaflet)
library(jsonlite)
ui <- fluidPage(
tags$head(
tags$style(HTML("
#map { height: 600px; width: 100%; }
.tree-form { padding: 10px; }
.tree-form input { margin: 5px 0; width: 100%; }
.tree-info { padding: 10px; }
.control-panel {
position: absolute;
top: 10px;
left: 10px;
background: white;
padding: 10px;
z-index: 1000;
border: 1px solid #ccc;
border-radius: 4px;
}
.control-panel button, .control-panel input { margin-top: 5px; }
"))
),
leafletOutput("map"),
absolutePanel(
class = "control-panel",
top = 10, left = 10,
div("点击地图添加树并编辑资料"),
actionButton("export", "导出树数据"),
fileInput("loadFile", "加载树数据", accept = ".json")
),
tags$script(HTML("
var markers = {};
var markerIdCounter = 0;
var map; // 全局存储地图对象
var greenDotIcon = L.divIcon({
className: 'custom-dot',
html: '<div style=\"background-color: green; width: 8px; height: 8px; border-radius: 50%;\"></div>',
iconSize: [8, 8],
iconAnchor: [4, 4]
});
function getTreeInfoContent(marker) {
return `
<div class=\"tree-info\">
<b>树信息</b><br>
树种: ${marker.treeData.species || '未指定'}<br>
坐标: ${marker.treeData.lat}, ${marker.treeData.lng}<br>
<button onclick=\"Shiny.setInputValue('edit_tree', '${marker.id}', {priority: 'event'})\">编辑</button>
<button onclick=\"Shiny.setInputValue('delete_tree', '${marker.id}', {priority: 'event'})\">删除</button>
</div>
`;
}
// 确保地图对象可用后再处理数据
function safeAddMarkers(treeDataArray) {
if (!map) {
console.error('地图未初始化，等待重试...');
setTimeout(function() { safeAddMarkers(treeDataArray) }, 100);
return;
}
treeDataArray.forEach(function(treeData) {
try {
var lat = parseFloat(treeData.lat);
var lng = parseFloat(treeData.lng);
if (isNaN(lat) || isNaN(lng)) {
console.error('无效坐标:', treeData);
return;
}
var marker = L.marker([lat, lng], { icon: greenDotIcon }).addTo(map);
marker.id = 'marker-' + markerIdCounter++;
marker.treeData = {
species: treeData.species || '',
lat: lat.toFixed(6),
lng: lng.toFixed(6)
};
markers[marker.id] = marker;
marker.bindPopup(getTreeInfoContent(marker));
console.log('添加标记:', marker.id);
} catch (error) {
console.error('添加标记失败:', error);
}
});
}
Shiny.addCustomMessageHandler('loadTreeData', function(treeDataArray) {
console.log('收到数据，类型:', Array.isArray(treeDataArray) ? '数组' : typeof treeDataArray);
safeAddMarkers(treeDataArray);
});
"))
)
server <- function(input, output, session) {
# 初始化地图并暴露 map 对象到全局
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 113.2943, lat = 23.0965, zoom = 19) %>%
htmlwidgets::onRender("
function(el, x) {
// 将地图对象赋值给全局变量
window.map = this;
console.log('地图初始化完成');
}
")
})
# 自动加载树数据
observe({
if (file.exists("treedata.json")) {
tryCatch({
treeData <- fromJSON("treedata.json", simplifyVector = FALSE)
cat("数据加载成功，条目数:", length(treeData), "\n")
session$sendCustomMessage(type = "loadTreeData", treeData)
}, error = function(e) {
cat("加载失败:", e$message, "\n")
})
}
})
# 文件上传处理
observeEvent(input$loadFile, {
req(input$loadFile)
tryCatch({
treeData <- fromJSON(input$loadFile$datapath, simplifyVector = FALSE)
session$sendCustomMessage(type = "loadTreeData", treeData)
}, error = function(e) {
showNotification(paste("加载失败:", e$message), type = "error")
})
})
# 其他功能保持不变
observeEvent(input$save_tree, {
session$sendCustomMessage(type = "updateMarker", list(
id = input$save_tree$id,
species = input$save_tree$species
))
})
output$export <- downloadHandler(
filename = "tree_data.json",
content = function(file) {
shinyjs::runjs("
var treeDataArray = Object.values(markers).map(marker => marker.treeData);
Shiny.setInputValue('exported_data', treeDataArray, {priority: 'event'});
")
req(input$exported_data)
write(toJSON(input$exported_data, auto_unbox = TRUE, pretty = TRUE), file)
}
)
}
shinyApp(ui, server)
getwd()
rsconnect::deployApp(appDir = ""C:/Users/13368/Desktop/lab/R_learning/proj_treemap"",
rsconnect::deployApp(appDir = "C:/Users/13368/Desktop/lab/R_learning/proj_treemap",
appPrimaryDoc = "treemap.r",
forceUpdate = TRUE,
quarto = FALSE)  # 明确指定不是 Quarto 文档
